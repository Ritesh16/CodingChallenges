1. You can use the two-pointers for some problems. Also, we can vary the speed of the pointers.

For eg. in beginning we can point both pointers to first element of linked list. Then we can start a loop in which we can move first pointer with speed 1.
that is move one element at a time, and second pointer with speed 2 that is moving two elements at a time (second pointer will do second=second.next.next);

Very useful for detecting cycle in linked list.

2. We can use null pointer at beginning to deal with edge case scenarios.

3. Floyd Cycle Algorithm-- for detecting cycle.

4. To find intersection in linked list, we can subtract length of linked lists and skip few elements of bigger linked list and start with common length.

Tips
It is similar to what we have learned in an array. But it can be trickier and error-prone. There are several things you should pay attention:

1. Always examine if the node is null before you call the next field.

Getting the next node of a null node will cause the null-pointer error. For example, before we run fast = fast.next.next, we need to examine both fast and fast.next is not null.

2. Carefully define the end conditions of your loop.

Run several examples to make sure your end conditions will not result in an endless loop. And you have to take our first tip into consideration when you define your end conditions.

Complexity Analysis
It is easy to analyze the space complexity. If you only use pointers without any other extra space, the space complexity will be O(1). However, it is more difficult to analyze the time complexity. In order to get the answer, we need to analyze how many times we will run our loop .

In our previous finding cycle example, let's assume that we move the faster pointer 2 steps each time and move the slower pointer 1 step each time.

If there is no cycle, the fast pointer takes N/2 times to reach the end of the linked list, where N is the length of the linked list.
If there is a cycle, the fast pointer needs M times to catch up the slower pointer, where M is the length of the cycle in the list.
Obviously, M <= N. So we will run the loop up to N times. And for each loop, we only need constant time. So, the time complexity of this algorithm is O(N) in total.

Analyze other problems by yourself to improve your analysis skill. Don't forget to take different conditions into consideration. If it is hard to analyze for all situations, consider the worst one.

  Summary - Linked List Classic Problems
We have provided several exercises for you. You might have noticed the similarities between them. Here we provide some tips for you:

 

1. Going through some test cases will save you time.

It is not easy to debug when using a linked list. Therefore, it is always useful to try several different examples on your own to validate your algorithm before writing code.

 

2. Feel free to use several pointers at the same time.

Sometimes when you design an algorithm for a linked-list problem, there might be several nodes you want to track at the same time. You should keep in mind which nodes you need to track and feel free to use several different pointers to track these nodes at the same time.

If you use several pointers, it will be better to give them suitable names in case you have to debug or review your code in the future.

 

3. In many cases, you need to track the previous node of the current node.

You are not able to trace back the previous node in a singly linked list. So you have to store not only the current node but also the previous node. This is different in a doubly linked list which we will cover in the later chapter.